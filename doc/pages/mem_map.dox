/*! \page addressing_modes Addressing Modes 
    \brief Listing and details of the LC86K's addressing modes

    Most instructions implicitly operate on some fixed set of SFRs (usually ACC); however, additional operands 
    in either the \link data_space internal RAM or data space \endlink or the \link instruction_space external
    ROM or instruction space \endlink may be specified using one of the addressing modes described below.

|Mnemonic   |Name             |Description                                  
|-----------|-----------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|
|\b #i8     |Immediate        |8-bit integer constant encoded within the instruction                                                                                                          |
|\b d9      |Direct           |Arbitrary RAM-space pointer, specified using a 9-bit address                                                                                                   |
|\b @Ri     |Indirect         |Arbitrary RAM-space pointer, specified by combining a stored address, SFR values, and indirection mode (see the next section).                                 |
|\b b3      |Bit Specifier    |A 3-bit integer constant specifying a particular target bit for the instruction. Bit 7 is the MSB, Bit 0 is the LSB.                                           |
|\b a12     |Absolute (12-Bit)|12-bit big endian program location within ROM space. The four most significant bits of the PC remain unaffected, restricting jumping is to within 4k segments. |
|\b a16     |Absolute (16-Bit)|A full 16-bit program location within ROM space, big endian.                                                                                                   |
|\b r8      |Relative (8-Bit) |A program/ROM location specified as a signed relative offset from the next instruction's address.                                                              |
|\b r16     |Relative (16-Bit)|A program/ROM location specified as an unsigned relative offset from the next instruction's address, in little endian byte order.                              |


\subsection indirect_addressing Indirect Addressing
The target address when using indirect addressing is given by loading the low byte from a source indirect address register
and combining it with the MSB of the indirection mode as the 9th bit of the target address. The indirect address register
sourced is determined by the state of the IRBK1 and IRBK0 PSW flags as well as the indirection mode specified within the instruction.

The following table illustrates the relationship between IRBK0, IRBK1, the indirection mode, and the source and target addresses:

|IRBK1|IRBK0|Mode|Source Address|Operand Target
|:---:|:---:|:--:|:------------:|:------------:
|0    |0    |@R0 |000           |RAM (000-0FF)
|^    |^    |@R1 |001           |^
|^    |^    |@R2 |002           |SFR (100-1FF)
|^    |^    |@R3 |003           |^
|0    |1    |@R0 |004           |RAM (000-0FF)
|^    |^    |@R1 |005           |^
|^    |^    |@R2 |006           |SFR (100-1FF)
|^    |^    |@R3 |007           |^
|1    |0    |@R0 |008           |RAM (000-0FF)
|^    |^    |@R1 |009           |^ 
|^    |^    |@R2 |00A           |SFR (100-1FF)
|^    |^    |@R3 |00B           |^
|1    |1    |@R0 |00C           |RAM (000-0FF)
|^    |^    |@R1 |00D           |^ 
|^    |^    |@R2 |00E           |SFR (100-1FF)
|^    |^    |@R3 |00F           |^

The LC86K CPU has a 16-byte address range which is split into 4 banks of 4 indirect address registers. The bank is chosen 
by setting the two indirect address register bank flags within the PSW (IRBK1, IRBK0). The indirection mode is specified
as part of the instruction, using the @Ri mnemonic. The lower two indirect address modes (@R0-@R1) of each bank specify targets
within RAM, while the upper two indirect address modes (@R2-@R3) specify SFR targets.
*/

/*! \page memory_map Memory Map
    \brief Map of the VMU's various memory spaces

    The VMU is a strange beast with multiple disjoint address spaces for data, instructions, and more. Understanding
    the various segments of the memory map and their layout is required to master the VMU's architecture from a 
    software perspective.
[TOC]

\subsection data_space RAM Memory Space
The following table shows the various segments and banks of the main RAM or the internal data address space. 
This address space is the target of regular data transfer instructions, unless otherwise specified. Spanning
the memory space is XRAM, SFRs, and RAM. XRAM has 3 banks of 64, 64, and 16 bytes respectively. The SFR range 
spans 143 bytes. Main system memory is broken into two banks of 256 bytes each. Bank 0 contains the stack and
is reserved for use by the BIOS and OS routines exclusively. Bank 1 is where the user's generic application
memory resides.
|Address|Bank 0                                         |Bank 1                          |Bank 2      |
|-------|:---------------------------------------------:|:------------------------------:|:----------:|
|1B0-1BF|XRAM - Upper Half of Framebuffer               |XRAM - Lower Half of Framebuffer|UNUSED      |
|1A0-1AF|^                                              |^                               |^           |
|190-19F|^                                              |^                               |^           |
|180-18F|^                                              |^                               |XRAM - Icons|
|170-17F|\link sfrs Special Function Registers \endlink |UNUSED                          |UNUSED      |
|160-16F|^                                              |^                               |^           |
|150-15F|^                                              |^                               |^           |
|140-14F|^                                              |^                               |^           |
|130-13F|^                                              |^                               |^           |
|120-12F|^                                              |^                               |^           |
|110-11F|^                                              |^                               |^           |
|100-10F|^                                              |^                               |^           |
|0F0-0FF|Stack Area                                     |Application/User RAM            |^           |
|0E0-0EF|^                                              |^                               |^           |
|0D0-0DF|^                                              |^                               |^           |
|0C0-0CF|^                                              |^                               |^           | 
|0B0-0BF|^                                              |^                               |^           |
|0A0-0AF|^                                              |^                               |^           |
|090-09F|^                                              |^                               |^           |
|080-08F|\link system_variables System/BIOS RAM \endlink|^                               |^           |
|070-07F|^                                              |^                               |^           | 
|060-06F|^                                              |^                               |^           |
|050-05F|^                                              |^                               |^           |
|040-04F|^                                              |^                               |^           |
|030-03F|^                                              |^                               |^           |
|020-02F|^                                              |^                               |^           |
|010-01F|^                                              |^                               |^           |
|000-00F|^                                              |^                               |^           |

\subsection instruction_space ROM Memory Space
Due to the fact that the VMU can execute either directly from the BIOS, residing on a built-in ROM chip,
or from a GAME user application residing in vlash, the device treats the instruction space as a generic
memory space, which can swap between sourcing instructions between ROM and flash depending on the CPU state.
ROM is a single chip spanning 64KB of space, while flash is 2 banks of 64KB each. 

|Address    |ROM                  |Flash (Bank 0)        |Flash (Bank 1)
|-----------|---------------------|----------------------|------------------------
|F0FFF-FFFFF|UNUSED               |For GAME/DATA Use     |For DATA Use Only
|E0000-EFFFF|OS Program Area      |^                     |^
|40000-DFFFF|Reserved Area        |^                     |^
|00000-3FFFF|System Program Area  |^                     |^

\subsection wram Work RAM
Work RAM is an additional, separate memory space from main RAM. It offers the VMU an additional 512 bytes which
can be utilized as more general-purpose storage when in standalone mode. While connected to a Dreamcast, this 
storage functions as a Maple TX/RX packet buffer for the Maple communications stack. WRAM is accessed one byte
at a time, with a target address given by the two VRMAD SFRs, and read/writes being issued via accessing the 
VTRBF SFR.

|Address|Description                     |
|-------|--------------------------------|
|1FF    |512 Bytes Additional Work RAM   |
|...    |^                               |
|000    |^                               |

*/

/*! \page system_variables System Variables
    \brief Map of the DATA address space
\warning 
These values are not meant to be manipulated by the user, so writing invalid data to them can cause system instability.

|Address  |Name                               |Description                             |
|--------:|:----------------------------------|----------------------------------------|
|<center><b>Date & Time</b></center>|||
|0x10|\link EVMU_ADDRESS_SYSTEM_YEAR_MSB_BCD  |BCD-Encoded Century (first two digits)  |
|0x11|\link EVMU_ADDRESS_SYSTEM_YEAR_LSB_BCD  |BCD-Encoded Year (last two digits)      |         
|0x12|\link EVMU_ADDRESS_SYSTEM_MONTH_BCD     |BCD-Encoded Month (1-12)                |
|0x13|\link EVMU_ADDRESS_SYSTEM_DAY_BCD       |BCD-Encoded Day (1-31)                  |
|0x14|\link EVMU_ADDRESS_SYSTEM_HOUR_BCD      |BCD-Encoded Hour (0-23)                 |
|0x15|\link EVMU_ADDRESS_SYSTEM_MINUTE_BCD    |BCD-Encoded Minute (0-59)               |
|0x16|\link EVMU_ADDRESS_SYSTEM_SEC_BCD       |BCD-Encoded Second (0-59)               |
|0x17|\link EVMU_ADDRESS_SYSTEM_YEAR_MSB      |Century (first two digits)              |
|0x18|\link EVMU_ADDRESS_SYSTEM_YEAR_LSB      |Year (last two digits)                  |
|0x19|\link EVMU_ADDRESS_SYSTEM_MONTH         |Month (1-12)                            |
|0x1A|\link EVMU_ADDRESS_SYSTEM_DAY           |Day (1-31)                              |
|0x1B|\link EVMU_ADDRESS_SYSTEM_HOUR          |Hour (0-59)                             |
|0x1C|\link EVMU_ADDRESS_SYSTEM_MINUTE        |Minute (0-59)                           |
|0x1D|\link EVMU_ADDRESS_SYSTEM_SEC           |Second (0-59)                           |
|0x1E|\link EVMU_ADDRESS_SYSTEM_HALF_SEC      |Half Second (0-1)                       |
|0x1F|\link EVMU_ADDRESS_SYSTEM_LEAP_YEAR     |Leap Year (0 = no, 1 = yes)             |
|<center><b>General</b></center>|||
|0x30|\link EVMU_ADDRESS_SYSTEM_MODE          |Index for BIOS Mode                     |
|0x31|\link EVMU_ADDRESS_DATE_SET             |Date/Time Valid (0x0 = no, 0xff = yes)  |
|0x50|\link EVMU_ADDRESS_SYSTEM_QUART_YEAR_MSB|Quarter Year MSB                        |
|0x51|\link EVMU_ADDRESS_SYSTEM_QUART_YEAR_LSB|Quarter Year LSB                        |
|0x60|\link EVMU_ADDRESS_SYSTEM_CURSOR_POS_COL|Menu Cursor column position             |
|0x61|\link EVMU_ADDRESS_SYSTEM_CURSOR_POS_ROW|Menu Cursor row position                |
|0x6D|\link EVMU_ADDRESS_SYSTEM_GAME_LAST_BLK |Last block used by minigame             |
|0x6E|\link EVMU_ADDRESS_SYSTEM_BATTERY_CHECK |Check Low battery (0x0 = yes, 0xff = no)|
|0x80|\link EVMU_ADDRESS_SYSTEM_STACK_BASE    |First stack location                    |
|... |<center><b>Stack</b></center>||
|0xFF|\link EVMU_ADDRESS_SYSTEM_STACK_END     |Last stack location                     |
*/

/*! \page sfrs Special Function Registers
    \brief Listing of all known SFRs an their function
Address  |Name                               |Description                             |
--------:|:----------------------------------|----------------------------------------|
<center><b>CPU</b></center>|||
0x100|<b>ACC</b>                             |Accumulator                             |
0x101|<b>PSW</b>                             |Program Status Word                     |         
0x102|\b B                                   |B Register (General Purpose)            |
0x103|\b C                                   |C Register (General Purpose)            |
0x104|\b TRL                                 |Table Reference (Low Byte)              |
0x105|\b TRH                                 |Table Reference (High Byte)             |
0x106|\b SP                                  |Stack Pointer                           |
0x107|\b PCON                                |Power Control                           |
0x108|\b IE                                  |Interrupt Enable Control                |
0x109|\b IP                                  |Interrupt Priority Ranking Control      |
0x10A|<center>UNUSED</center>||
0x10B|^||                 
0x10C|^||
0x10D|\b EXT                                 |External Memory Control                 |
0x10E|\b OCR                                 |Oscillation Control                     |
0x10F|<center>UNUSED</center>||
<center><b>Timer 0</b></center>|||
0x110|\b T0CNT                               |Timer 0 Control                         |
0x111|\b T0PRR                               |Timer 0 Prescalar Data                  |
0x112|\b T0L                                 |Timer 0 Low Byte                        |
0x113|\b T0LR                                |Timer 0 Low Byte Reload                 |
0x114|\b T0H                                 |Timer 0 High Byte                       |
0x115|\b T0HR                                |Timer 0 High Byte Reload                |
0x116|<center>UNUSED</center>||
0x117|^||
<center><b>Timer 1</b></center>|||
0x118|<b>T1CNT</b>                           |Timer 1 Control                         |
0x119|<center>UNUSED</center>||
0x11A|<b>T1LC</b>                            |Timer 1 Low Compare Data                |
0x11B|<b>T1L</b>                             |Timer 1 Low                             |
0x11C|<b>T1HC</b>                            |Timer 1 High Compare Data               |
0x11D|<b>T1H</b>                             |Timer 1 High                            |
0x11E|<center>UNUSED</center>||
0x11F|^||
<center><b>LCD Screen</b></center>|||
0x120|\b MCR                                 |Mode Control                            |
0x121|<center>UNUSED</center>||
0x122|\b STAD                                |Start Address                           |
0x123|\b CNR                                 |Character Number Register               |
0x124|\b TDR                                 |Time Division Register                  |
0x125|\b XBNK                                |XRAM Bank Address                       |
0x126|<center>UNUSED</center>||
0x127|\b VCCR                                |LCD Contrast Control Register           |
0x128|<center>UNUSED</center>||
0x129|^||
0x12A|^||
0x12B|^||
0x12C|^||
0x12D|^||
0x12E|^||
0x12F|^||
<center><b>Serial Interface 0</b></center>|||
0x130|\b SCON0                               |SIO0 Control                            |
0x131|\b SBUF0                               |SIO0 Buffer                             |
0x132|\b SBR                                 |SIO Baud Rate Generator                 |
0x133|<center>UNUSED</center>||
<center><b>Serial Interface 1</b></center>|||
0x134|SCON1                                  |SIO1 Control                            |
0x135|SBUF1                                  |SIO1 Buffer                             |
0x136|<center>UNUSED</center>||
0x137|^||
0x138|^||
0x139|^||
0x13A|^||
0x13B|^||
0x13C|^||
0x13D|^||
0x13E|^||
0x13F|^||
0x140|^||
0x141|^||
0x142|^||
0x143|^||
<center><b>Port 1</b></center>|||
0x144|\b P1                                 |Port 1 Latch                             |
0x145|\b P1DDR                              |Port 1 Data Direction Register           |
0x146|\b P1FCR                              |Port 1 Function Control Register         |
0x147|\b ?                                  |Bits[0-6]: Logic High, Bit[7]: R/W       |
0x148|\b ?                                  |BIOS writes once with 0x00 on startup    |
0x149|<center>UNUSED</center>||
0x14A|^||
0x14B|^||
<center><b>Port 3</b></center>|||
0x14C|\b P3                                 |Port 3 Latch                             |
0x14D|\b P3DDR                              |Port 3 Data Direction Register           |
0x14E|\b P3INT                              |Port 3 Interrupt Control                 |
0x14F|<center>UNUSED</center>||
0x150|^||
0x151|\b ?                                  |BIOS sets bit 5 only                     |
0x152|UNUSED||
0x153|^||
<center><b>Flash</b></center>|||
0x154|\b FPR                                |Flash Program Register                   |
0x155|\b ?                                  |BIOS writes once with 0xFF               |
0x156|<center>UNUSED</center>||
0x157|^||
0x158|^||
0x159|^||
0x15A|^||
0x15B|^||
<center><b>Port 7</b></center>|||
0x15C|\b P7                                 |Port 7 Latch                             |
0x15D|\b I01CR                              |External Interrupt 0, 1 Control          |
0x15E|\b I23CR                              |External Interrupt 2, 3 Control          |
0x15F|\b ISL                                |Input SIgnal Selection                   |
<center><b>Maple</b></center>|||
0x160|\b MPLSW                              |Maple Status Word                        |
0x161|\b MPLSTA                             |Maple Start Transfer                     |
0x162|\b MPLRST                             |Maple Reset                              |
<center><b>Work RAM</b></center>|||
0x163|\b VSEL                               |VMS Control Registers                    |
0x164|\b VRMAD1                             |Work RAM Access Address 1                |
0x165|\b VRMAD2                             |Work RAM Access Address 2                |
0x166|\b VTRBF                              |Send/Receive Buffer                      |
0x167|\b VLREG                              |Maple Word Length Registration           |
0x168|<center>UNUSED</center>||
0x169|^||
0x16A|^||
0x16B|^||
0x16C|^||
0x16D|^||
0x16E|^||
0x16F|^||
0x170|^||
0x171|^||
0x172|^||
0x173|^||
0x174|^||
0x175|^||
0x176|^||
0x177|^||
0x178|^||
0x179|^||
0x17A|^||
0x17B|^||
0x17C|^||
0x17D|^||
0x17E|^||
<center><b>Base Timer</b></center>|||
0x17F|\b BTCR                             |Base Time Control Register                |

*/