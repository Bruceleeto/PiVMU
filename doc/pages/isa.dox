/*! \page hardware_docs Hardware Docs 
    \brief Documentation of the VMU and its various components

    \subpage specs

    \subpage memory_map

    \subpage addressing_modes

    \subpage instruction_ref
    
    \subpage sfrs

    \subpage xram
    
    \subpage system_variables

    \subpage interrupts

*/

/*! \page interrupts Interrupts
    \brief Listing of interrupt service routines and related configuration

    |Priority<br>Rank|Interrupt Type         |Vector<br>Address|Trigger                 |Source Flag |Enable Flag |Priority<br>Levels |
    |----------------|-----------------------|-----------------|------------------------|------------|------------|-------------------|
    |1               |External Interrupt INT0|0003             |P70/INT0 event detection|I01CR1      |I01CR0      |Highest/Low        |
    |2               |External Interrupt INT1|000B             |P71/INT1 event detection|I01CR5      |I01CR4      |^                  |
    |3               |External Interrupt INT2|0013             |P72/INT2 event detection|I23CR1      |I23CR0      |High/Low           |
    |^               |Timer/Counter T0L      |^                |T0L overflow            |T0CNT1      |T0CNT0      |^                  |
    |4               |External Interrupt INT3|001B             |P73/INT3 event detection|I23CR5      |I23CR4      |High/Low           |
    |^               |Base Timer             |^                |Base Timer overflow     |BTCR1, BTCR3|BTCR0, BTCR2|^                  |
    |5               |Timer/Counter T0H      |0023             |T0H overflow            |T0CNT1      |T0CNT0      |High/Low           |
    |6               |Timer T1               |002B             |T1L overflow            |T1CNT1      |T1CNT0      |High/Low           |
    |^               |^                      |^                |T1H overflow            |T1CNT3      |T1CNT2      |^                  |
    |7               |Serial I/O 0           |0033             |SIO0 end detect         |SCON01      |SCON00      |High/Low           |
    |8               |Serial I/O 1           |003B             |SIO1 end detect         |SCON11      |SCON10      |High/Low           |
    |9               |Maple Interrupt        |0043             |VMU tx/rx end detect    |RFB         |RFBENA      |High/Low           |
    |10              |Port 3 (P32INT=1)      |004B             |Port 3 "L" level detect |P31INT      |P30INT      |High/Low           |
*/

/*! \page specs Technical Specifications
    \brief Overview of the VMU's hardware features

     Component|Description
    ---------:|:----------
    \b CPU    |Sanyo LC86K87 (Custom LC8670)
    ^         |8-bit Processor Words
    ^         |9-bit Data Address Space
    ^         |16-bit Instruction Address Space
    \b Clocks |32.8Khz Quartz Oscillator
    ^         |879.2Khz RC Oscillator
    ^         |6Mhz CF Oscillator
    \b RAM    |Bank 0: 256 bytes reserved for system BIOS
    ^         |Bank 1: 256 bytes for applications
    \b WRAM   |Extra 512 bytes "Work RAM" 
    ^         |Doubles as Maple Transfer Buffer (when connected to Dreamcast)
    \b ROM    |Firmware: 4KB
    ^         |System BIOS: 16KB
    \b XRAM   |Framebuffer: 2x128-Byte Banks
    ^         |Icon Storage: 1x128-Byte Bank
    \b Flash  |128KB Total, 8-bit FAT filesystem
    ^         |200 User Blocks @ 512 bytes/block
    \b Power  |2xCR2032 Batteries (standalone mode)
    ^         |5v input pin (connected to Dreamcast)
    \b Display|48x32 Dot Resolution, monochrome LCD screen
    ^         |37mm (1.46 in) x 26mm (1.02 in) size
    \b Sound  |Piezoelectric Buzzer
    ^         |1-channel 8 or 9-to-16 bit PWM source
    \b Input  |4-Button Directional-Pad
    ^         |A, B, MODE, Sleep Buttons
    \b Timer  |Base Timer (14-bit up counter)
    ^         |2xTimer Circuits (16 or 8-bit timer/counters)
    \b Serial |Dedicated Maple Interface (VMU-to-Dreamcast connectivity)
    ^         |2-Channel Synchronous 8-bit Serial (VMU-to-VMU connectivity)
*/

/*! \page instruction_ref Instruction Set
    \brief Listing of all LC86K instructions and their details

 [TOC]

| |0                             |1                                 |2-3                                |4-7                                    | 8-F                              |
|-|:----------------------------:|:--------------------------------:|:---------------------------------:|:-------------------------------------:|:--------------------------------:|
|0|<a href="#nop">NOP</a>        |<a href="#br">BR r8</a>           |<a href="#ld_dir">LD d9</a>        |<a href="#ld_ind">LD @Ri</a>           |<a href="#call">CALL a12</a>      |
|1|<a href="#callr">CALLR r16</a>|<a href="#brf">BRF r16</a>        |<a href="#st_dir">ST d9</a>        |<a href="#st_ind">ST @Ri</a>           |^                                 |
|2|<a href="#callf">CALLF a16</a>|<a href="#jmpf">JMPF a16</a>      |<a href="#mov_dir">MOV #i8, d9</a> |<a href="#mov_ind">MOV #i8, @Ri</a>    |<a href="#jmp">JMP a12</a>        |
|3|<a href="#mul">MUL</a>        |<a href="#be_imm">BE #i8, r8</a>  |<a href="#be_dir">BE d9, r8</a>    |<a href="#be_ind">BE @Ri, #i8, r8</a>  |^                                 |
|4|<a href="#div">DIV</a>        |<a href="#bne_imm">BNE #i8, r8</a>|<a href="#bne_dir">BNE d9, r8</a>  |<a href="#bne_ind">BNE @Ri, #i8, r8</a>|<a href="#bpc">BPC d9, b3, r8</a> |
|5|<a href="#ldf">LDF</a>        |<a href="#stf">STF</a>            |<a href="#dbnz_dir">DBNZ d9, r8</a>|<a href="#dbnz_ind">DBNZ @Ri, r8</a>   |^                                 |
|6|<a href="#push">PUSH d9</a>   ||                                  <a href="#inc_dir">INC d9</a>      |<a href="#inc_ind">INC @Ri</a>         |<a href="#bp">BP d9, b3, r8</a>   |
|7|<a href="#pop">POP d9</a>     ||                                  <a href="#dec_dir">DEC d9</a>      |<a href="#dec_ind">DEC @Ri</a>         |^                                 |
|8|<a href="#bz">BZ r8</a>       |<a href="#add_imm">ADD #i8</a>    |<a href="#add_dir">ADD d9</a>      |<a href="#add_ind">ADD @Ri</a>         |<a href="#bn">BN d9, b3, r8</a>   |
|9|<a href="#bnz">BNZ r8</a>     |<a href="#addc_imm">ADDC #i8</a>  |<a href="#addc_dir">ADDC d9</a>    |<a href="#addc_ind">ADDC @Ri</a>       |^                                 |
|A|<a href="#ret">RET</a>        |<a href="#sub_imm">SUB #i8</a>    |<a href="#sub_dir">SUB d9</a>      |<a href="#sub_ind">SUB @Ri</a>         |<a href="#not1">NOT1 d9, b3</a>   |
|B|<a href="#reti">RETI</a>      |<a href="#subc_imm">SUBC #i8</a>  |<a href="#subc_dir">SUBC d9</a>    |<a href="#subc_ind">SUBC @Ri</a>       |^                                 |
|C|<a href="#ror">ROR</a>        |<a href="#ldc">LDC</a>            |<a href="#xch_dir">XCH d9</a>      |<a href="#xch_ind">XCH @Ri</a>         |<a href="#clr1">CLR1 d9, b3</a>   |
|D|<a href="#rorc">RORC</a>      |<a href="#or_imm">OR #i8</a>      |<a href="#or_dir">OR d9</a>        |<a href="#or_ind">OR @Ri</a>           |^                                 |
|E|<a href="#rol">ROL</a>        |<a href="#and_imm">AND #i8</a>    |<a href="#and_dir">AND d9</a>      |<a href="#and_ind">AND @Ri</a>         |<a href="#set1">SET1 d9, b3</a>   |
|F|<a href="#rolc">ROLC</a>      |<a href="#xor_imm">XOR #i8</a>    |<a href="#xor_dir">XOR d9</a>      |<a href="xor_ind">XOR @Ri</a>          |^                                 |
The LC86K instruction set has 70 instructions, which are identified by 45 operation codes. These opcodes can be grouped into 8 categories. 

\section arithmetic Arithmetic
\subsection add ADD
Add the operand to the ACC Register. CY, AC, and OV are all affected depending on the result.
Mnemonic                   |Encoding                                    |Cycles
---------------------------|--------------------------------------------|------
<a id="add_imm">ADD #i8</a>|10000001  [i7][i6][i5][i4][i3][i2][i1][i0]  |1
<a id="add_dir">ADD d9</a> |1000001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="add_ind">ADD @Ri</a>|100001[i1][i0]                              |1

\subsection addc ADDC
Add the operand plus the carry bit (CY) to the ACC Register. CY, AC, and OV are all affected depending on the result.
Mnemonic                     |Encoding                                    |Cycles
-----------------------------|--------------------------------------------|------
<a id="addc_imm">ADDC #i8</a>|10010001  [i7][i6][i5][i4][i3][i2][i1][i0]  |1
<a id="addc_dir">ADDC d9</a> |1001001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="addc_ind">ADDC @Ri</a>|100101[i1][i0]                              |1
 
\subsection sub SUB
Subtract the operand from the ACC Register. CY, AC, and OV are all affected depending on the result.
Mnemonic                   |Encoding                                    |Cycles
---------------------------|--------------------------------------------|------
<a id="sub_imm">SUB #i8</a>|10100001  [i7][i6][i5][i4][i3][i2][i1][i0]  |1
<a id="sub_dir">SUB d9</a> |1010001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="sub_ind">SUB @Ri</a>|101001[i1][i0]                              |1

\subsection subc SUBC
Subtract the operand and carry flag (CY) from the ACC Register. CY, AC, and OV are all affected depending on the result.
Mnemonic                     |Encoding                                    |Cycles
-----------------------------|--------------------------------------------|------
<a id="subc_imm">SUBC #i8</a>|10110001  [i7][i6][i5][i4][i3][i2][i1][i0]  |1
<a id="subc_dir">SUBC d9</a> |1011001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="subc_ind">SUBC @Ri</a>|101101[i1][i0]                              |1

\subsection inc INC
Add 1 to the operand. No PSW flags are affected.
Mnemonic                   |Encoding                                    |Cycles
---------------------------|--------------------------------------------|------
<a id="inc_dir">INC d9</a> |0110001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="inc_ind">INC @Ri</a>|011001[i1][i0]                              |1

\subsection dec DEC
Subtract 1 from the operand. No PSW flags are affected.
Mnemonic                   |Encoding                                    |Cycles
---------------------------|--------------------------------------------|------
<a id="dec_dir">DEC d9</a> |0111001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="dec_ind">DEC @Ri</a>|011101[i1][i0]                              |1

\subsection mul MUL
The 16-bit operand formed by the value of ACC being the high 8-bits and the value of C being the low 8-bits is 
multiplied by the value of the B register. The resulting 24-bit integer is stored from the high to low byte within B, ACC, and C respectively.
CY is cleared. OV is set if the result is greater than 16-bits or cleared otherwise.
Mnemonic|Encoding|Cycles
--------|--------|------
MUL     |00110000|7

\subsection div DIV
The 16-bit operand formed by the value of ACC being the high 8-bits and the value of C being the low 8-bits is divided by the contets of the B register. The resulting 16-bit quotient has its high byte stored within ACC and its low byte within C. The remainder is stored within B. CY is clared. OV is set if the remainder is zero or is cleared otherwise.
Mnemonic|Encoding|Cycles
--------|--------|------
DIV     |01000000|7

\section logical Logical
\subsection and AND
Perform bitwise AND operation between the contents of the ACC register and the given operand. No PSW flags are modified.
Mnemonic                   |Encoding                                    |Cycles
---------------------------|--------------------------------------------|------
<a id="and_imm">AND #i8</a>|11100001 [i7][i6][i5][i4][i3][i2][i1][i0]   |1
<a id="and_dir">AND d9</a> |1110001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="and_ind">AND @Ri</a>|111001[i1][i0]                              |1

\subsection or OR
Perform bitwise OR operation between the contents of the ACC register and the given operand. No PSW flags are modified.
Mnemonic                 |Encoding                                    |Cycles
-------------------------|--------------------------------------------|------
<a id="or_imm">OR #i8</a>|11010001 [i7][i6][i5][i4][i3][i2][i1][i0]   |1
<a id="or_dir">OR d9</a> |1101001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="or_ind">OR @Ri</a>|110101[i1][i0]                              |1

\subsection xor XOR
Perform bitwise XOR operation between the contents of the ACC register and the given operand. No PSW flags are modified.
Mnemonic                   |Encoding                                    |Cycles
---------------------------|--------------------------------------------|------
<a id="xor_imm">XOR #i8</a>|11110001 [i7][i6][i5][i4][i3][i2][i1][i0]   |1
<a id="xor_dir">XOR d9</a> |1111001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="xor_ind">XOR @Ri</a>|111101[i1][i0]                              |1

\subsection rol ROL
Rotate the value of the ACC register to the left by one bit position, wrapping the most significant bit around to the least significant bit. No PSW flags are modified.
Mnemonic|Encoding                                    |Cycles
--------|--------------------------------------------|------
ROL     |11100000                                    |1
    
\subsection rolc ROLC
Rotate the value of the ACC register to the left by one bit position, copying the most significant bit to the CY flag, and replacing the least significant bit with the old value of the CY flag. AV and OC flags are not modified.
Mnemonic|Encoding                                    |Cycles
--------|--------------------------------------------|------
ROLC    |11110000                                    |1

\subsection ror ROR
Rotate the value of the ACC register to the right by one bit position, wrapping the least significant bit around to the most significant bit. No PSW flags are modified.
Mnemonic|Encoding                                    |Cycles
--------|--------------------------------------------|------
ROR     |11000000                                    |1

\subsection rorc RORC
Rotate the value of the ACC register to the right by one bit position, copying the least significant bit to the CY flag, and replacing the most significant bit with the old value of the CY flag. AV and OC flags are not modified.
Mnemonic|Encoding                                    |Cycles
--------|--------------------------------------------|------
RORC    |11010000                                    |1

\section data_transfer Data Transfer
\subsection ld LD
Load the operand into the ACC register. No PSW flags are modified.
Mnemonic                 |Encoding                                    |Cycles
-------------------------|--------------------------------------------|------
<a id="ld_dir">LD d9</a> |0000001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="ld_ind">LD @Ri</a>|000001[i1][i0]                              |1

\subsection st ST
Store the value held in the ACC register into the operand address. No PSW flags are modified.
Mnemonic                 |Encoding                                    |Cycles
-------------------------|--------------------------------------------|------
<a id="st_dir">ST d9</a> |0001001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="st_ind">ST @Ri</a>|000101[i1][i0]                              |1

\subsection mov MOV
Sets the operand value to the immediate value. No PSW flags are modified
Mnemonic                        |Encoding                                                                     |Cycles
--------------------------------|-----------------------------------------------------------------------------|------
<a id="mov_dir">MOV @i8, d9</a> |0010001[d8] [d7][d6][d5][d4][d3][d2][d1][d0] [i7][i6][i5][i4][i3][i2][i1][i0]|2
<a id="mov_ind">MOV #i8, @Rj</a>|001001[i1][i0] [i7][i6][i5][i4][i3][i2][i1][i0]                              |1

\subsection ldc LDC
Loads a value from instruction space into the ACC register. The source address is calculated by adding ACC to the 16-bit table register value (TRH being the high byte, TRL being the low byte). No PSW flags are modified
Mnemonic|Encoding|Cycles
--------|--------|------
LDC     |11000001|2

\subsection ld LDF
Loads a value directly from flash into the ACC register. The flash address is given by the 17-bit value created by combining the low table register value as the lowest byte, the high table register value as the second byte, and using the value of FPR.addr (bit 0) as the 16th bit. 
Mnemonic|Encoding|Cycles
--------|--------|------
LDF     |01010000|2

\warning
This is only supposed to be done from the BIOS in system mode and bypasses any flash protection routines handled by Sega/Sanyo.

\subsection stf STF
Stores the value in the ACC register directly to flash. The flash address is given by the 17-bit value created by combining the low table register value as the lowest byte, the high table register value as the second byte, and using the value of FPR.addr (bit 0) as the 16th bit. 
Mnemonic|Encoding|Cycles
--------|--------|------
STF     |01010001|2

\note
This call will only succeed when flash has been programmed with the proper unlock sequence
\warning
This is only supposed to be done from the BIOS in system mode and bypasses any flash protection routines handled by Sega/Sanyo.

\subsection push PUSH
Pushes the operand onto the stack by incrementing the SP by one and storing it at the resulting position. No PSW flags are modified.
Mnemonic|Encoding                                    |Cycles
--------|--------------------------------------------|------
PUSH d9 |0110000[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|2

\subsection pop POP
Pops the operand from the stack by reading its value from the position pointed to by the SP register, then decrementing it by 1. No PSW flags are modified.
Mnemonic|Encoding                                    |Cycles
--------|--------------------------------------------|------
POP d9  |0111000[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|2

\subsection xch XCH
Echanges the values of the operand and the ACC register. No PSW flags are modified.
Mnemonic                   |Encoding                                    |Cycles
---------------------------|--------------------------------------------|------
<a id="xch_dir">XCH d9</a> |1100000[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
<a id="xch_ind">XCH @Ri</a>|110001[i1][i0]                              |1

\section jump Jump
\subsection jmp JMP
Jump unconditionally to the specified 12-bit absolute address. The upper 4 bits of this address must match with the instruction following the JMP. No PSW flags are modified.
Mnemonic|Encoding                                               |Cycles
--------|-------------------------------------------------------|------
JMP a12 |001[a11]1[a10][a9][a8] [a7][a6][a5][a4][a3][a2][a1][a0]|2

\subsection jmpf JMPF
Far jump unconditionally to the specified 16-bit absolute address. No PSW flags are modified.
Mnemonic|Encoding                                                                        |Cycles
--------|--------------------------------------------------------------------------------|------
JMPF a16|00100001 [a15][a14][a13][a12][a11][a10][a9][a8] [a7][a6][a5][a4][a3][a2][a1][a0]|2

\subsection br BR
Branch unconditionally to the 8-bit relative address, which is added as an 8-bit signed offset to the address of the instruction following the BR. No PSW flags are modified.
Mnemonic|Encoding                                 |Cycles
--------|-----------------------------------------|------
BR r8   |00000001 [r7][r6][r5][r4][r3][r2][r1][r0]|2

\subsection brf BRF
Far branch unconditionally to the 16-bit relative address, which is added as a 16-bit unsigned offset to the address of the instruction following the BRF minus one. Since the PC is a 16-bit unsigned integer, the operation can overflow 65536 and wrap back around, meaning you can branch to a lower address as well. No PSW flags are modified.
Mnemonic|Encoding                                                                        |Cycles
--------|--------------------------------------------------------------------------------|------
BRF r16 |00010001 [r7][r6][r5][r4][r3][r2][r1][r0] [r15][r14][r13][r12][r11][r10][r9][r8]|4

\section conditional_branch Conditional Branch
\subsection bz BZ
Branch if the ACC register is zero to the 8-bit relative address, which is added as an 8-bit signed offset to the address of the instruction following the BZ. No PSW flags are modified.
Mnemonic|Encoding                                 |Cycles
--------|-----------------------------------------|------
BZ r8   |10000000 [r7][r6][r5][r4][r3][r2][r1][r0]|2

\subsection bnz BNZ
Branch if the acc register is not zero to the 8-bit relative address, which is added as an 8-bit signed offset to the address of the instruction following BNZ. No PSWflags are modified.
Mnemonic|Encoding                                 |Cycles
--------|-----------------------------------------|------
BNZ r8  |10010000 [r7][r6][r5][r4][r3][r2][r1][r0]|2

\subsection bp BP
Branch if the specified bit of the operand is set, to the 8-bit relative address, which is added as an 8-bit signed offset to the address of the instruction following the BP. No PSW flags are modified.
Mnemonic     |Encoding                                                                              |Cycles
-------------|--------------------------------------------------------------------------------------|------
BP d9, b3, r8|011[d8]1[b2][b1][b0] [d7][d6][d5][d4][d3][d2][d1][d0] [r7][r6][r5][r4][r3][r2][r1][r0]|2

\subsection bpc BPC
If the specified bit of the operand is set, clear the bit and branch to the 8-bit relative address, which is added as an 8-bit signed offset to the address of the instruction following the BPC. No PSW flags are modified.
Mnemonic      |Encoding                                                                              |Cycles
--------------|--------------------------------------------------------------------------------------|------
BPC d9, b3, r8|010[d8]1[b2][b1][b0] [d7][d6][d5][d4][d3][d2][d1][d0] [r7][r6][r5][r4][r3][r2][r1][r0]|2

\subsection bn BN
Branch if the specified bit of the operand is not set, to the 8-bit relative address, which is added as an 8-bit signed offset to the address of the instruction following the BN. No PSW flags are modified.
Mnemonic     |Encoding                                                                              |Cycles
-------------|--------------------------------------------------------------------------------------|------
BN d9, b3, r8|100[d8]1[b2][b1][b0] [d7][d6][d5][d4][d3][d2][d1][d0] [r7][r6][r5][r4][r3][r2][r1][r0]|2

\subsection dbnz DBNZ
Decrements the operand by one, branching if the result is not zero to the 8-bit relative address, which is added as an 8-bit signed offset to the address of the instruction following the BN. No PSW flags are modified.
Mnemonic                         |Encoding                                                                              |Cycles
---------------------------------|--------------------------------------------------------------------------------------|------
<a id="dbnz_dir">DBNZ d9, r8</a> |0101001[d8] [d7][d6][d5][d4][d3][d2][d1][d0] [r7][r6][r5][r4][r3][r2][r1][r0]         |2
<a id="dbnz_ind">DBNZ @Ri, r8</a>|010101[i1][i0] [r7][r6][r5][r4][r3][r2][r1][r0]                                       |2

\subsection be BE
Branch if the value of the ACC register (or the indirect operand in the case of indirect addressing) is equal to the immediate or direct operand. 
CY is set 1 if ACC (or the indirect operand) is less than (but not equal to) the immediate or direct operand. AC and OV are not modified.
Mnemonic                          |Encoding                                                                        |Cycles
----------------------------------|--------------------------------------------------------------------------------|------
<a id="be_imm">BE #i8, r8</a>     |00110001 [i7][i6][i5][i4][i3][i2][i1][i0] [r7][r6][r5][r4][r3][r2][r1][r0]      |2
<a id="be_dir">BE d8, r8</a>      |0011001[d8] [d7][d6][d5][d4][d3][d2][d1][d0] [r7][r6][r5][r4][r3][r2][r1][r0]   |2
<a id="be_ind">BE @Ri, #i8, r8</a>|001101[i1][i0] [i7][i6][i5][i4][i3][i2][i1][i0] [r7][r6][r5][r4][r3][r2][r1][r0]|2

\subsection bne BNE
Branches if the contents of the ACC register (or the indirect operand as with the indirect addressing mode) are not equal to the immediate or direct operand, to the 8-bit relative address, which is added as an 8-bit signed offset to the address of the instruction following the BE. No PSW flags are modified.
Mnemonic                            | Encoding                                                                       |Cycles
------------------------------------|--------------------------------------------------------------------------------|-------
<a id="bne_imm">BNE #i8, r8</a>     |01000001 [i7][i6][i5][i4][i3][i2][i1][i0] [r7][r6][r5][r4][r3][r2][r1][r0]      |2
<a id="bne_dir">BNE d8, r8</a>      |0100001[d8] [d7][d6][d5][d4][d3][d2][d1][d0] [r7][r6][r5][r4][r3][r2][r1][r0]   |2
<a id="bne_ind">BNE @Ri, #i8, r8</a>|010001[i1][i0] [i7][i6][i5][i4][i3][i2][i1][i0] [r7][r6][r5][r4][r3][r2][r1][r0]|2

\section subroutine Subroutine
\subsection call CALL
Calls a function at the entry address specified using the 12-bit absolute address. The upper 4 bits of the address must be the same as the instruction following the CALL. The return address (address of the instruction following the CALL) is pushed onto the stack, with the lower 8-bits of the address pushed first, followed by the upper 8-bits. No PSW flags are modified.
Mnemonic|Encoding                                               |Cycles
--------|-------------------------------------------------------|------
CALL a12|000[a11]1[a10][a9][a8] [a7][a6][a5][a4][a3][a2][a1][a0]|2

\subsection callf CALLF
Makes a far call to a function at the entry address specified using a full 16-bit absolute address. The return address (address of the instruction following the CALLF) is pushed onto the stack, with the lower 8-bits of the address pushed first, followed by the upper 8-bits. No PSW flags are modified.
Mnemonic |Encoding                                                                        |Cycles
---------|--------------------------------------------------------------------------------|------
CALLF a16|00100000 [a15][a14][a13][a12][a11][a10][a9][a8] [a7][a6][a5][a4][a3][a2][a1][a0]|2

\subsection callr CALLR
Calls a function whose entry-point is specified as the 16-bit relative address operand. The address is calculated by adding the unsigned 16-bit offset to the address of the next instruction, proceeding the CALLR, minus one to produce the target address. Since the PC is a 16-bit unsigned integer, this can overflow and wrap back around, allowing you to call to lower addresseses as well. The return address (the instruction after the CALLR) is pushed onto the stack, with the lower byte being pushed first followed by the upper byte. No PSW flags are modified.
Mnemonic |Encoding                                                                        |Cycles
---------|--------------------------------------------------------------------------------|------
CALLR r16|00010000 [r7][r6][r5][r4][r3][r2][r1][r0] [r8][r9][r10][r11][r12][r13][r14][r15]|4

\subsection ret RET
Returns from a function, popping the PC from the stack, with the upper byte being popped first, followed by the lower byte. No PSW flags are modified.
Mnemonic|Encoding|Cycles
--------|--------|------
RET     |10100000|2

\subsection reti RETI
Returns from an interrupt, popping the PC from the stack, with the upper byte being popped first, followed by the lower byte. No PSW flags are modified.
Mnemonic|Encoding|Cycles
--------|--------|------
RETI    |10110000|2

\section bit_maipulation Bit Manipulation
\subsection clr1 CLR1
Clears the specified bit in within the operand. No PSW flags are modified.
Mnemonic   |Encoding                                             |Cycles
-----------|-----------------------------------------------------|------
CLR1 d9, b3|110[d8]1[b2][b1][b0] [d7][d6][d5][d4][d3][d2][d1][d0]|1   

\subsection set1 SET1
Sets the specified bit in within the operand. No PSW flags are modified.
Mnemonic                    |Encoding                                             |Cycles
-----------|-----------------------------------------------------|------
SET1 d9, b3|111[d8]1[b2][b1][b0] [d7][d6][d5][d4][d3][d2][d1][d0]|1   

\subsection not1 NOT1
Clears the specified bit in within the operand. No PSW flags are modified.
Mnemonic   |Encoding                                             |Cycles
-----------|-----------------------------------------------------|------
NOT1 d9, b3|101[d8]1[b2][b1][b0] [d7][d6][d5][d4][d3][d2][d1][d0]|1   

\section miscellaneous Miscellaneous
\subsection nop NOP
Does nothing. No PSW flags are modifed.
Mnemonic|Encoding|Cycles
--------|--------|------
NOP     |00000000|1

*/