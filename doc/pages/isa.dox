/*! \page hardware_docs Hardware Docs 
    \brief Documentation of the VMU and its various components

    \subpage specs

    \subpage instruction_ref
    
    \subpage sfrs
    
    \subpage system_variables
*/

/*! \page specs Technical Specifications
    \brief Overview of the VMU's hardware features

     Component|Description
    ---------:|:----------
    \b CPU    |Sanyo LC86K87 (Custom LC8670)
    ^         |8-bit Processor Words
    ^         |9-bit Data Address Space
    ^         |16-bit Instruction Address Space
    \b Clocks |32.8Khz Quartz Oscillator
    ^         |879.2Khz RC Oscillator
    ^         |6Mhz CF Oscillator
    \b RAM    |Bank 0: 256 bytes reserved for system BIOS
    ^         |Bank 1: 256 bytes for applications
    \b WRAM   |Extra 512 bytes "Work RAM" 
    ^         |Doubles as Maple Transfer Buffer (when connected to Dreamcast)
    \b ROM    |Firmware: 4KB
    ^         |System BIOS: 16KB
    \b XRAM   |Framebuffer: 2x128-Byte Banks
    ^         |Icon Storage: 1x128-Byte Bank
    \b Flash  |128KB Total, 8-bit FAT filesystem
    ^         |200 User Blocks @ 512 bytes/block
    \b Power  |2xCR2032 Batteries (standalone mode)
    ^         |5v input pin (connected to Dreamcast)
    \b Display|48x32 Dot Resolution, monochrome LCD screen
    ^         |37mm (1.46 in) x 26mm (1.02 in) size
    \b Sound  |Piezoelectric Buzzer
    ^         |1-channel 8 or 9-to-16 bit PWM source
    \b Input  |4-Button Directional-Pad
    ^         |A, B, MODE, Sleep Buttons
    \b Timer  |Base Timer (14-bit up counter)
    ^         |2xTimer Circuits (16 or 8-bit timer/counters)
    \b Serial |Dedicated Maple Interface (VMU-to-Dreamcast connectivity)
    ^         |2-Channel Synchronous 8-bit Serial (VMU-to-VMU connectivity)
*/

/*! \page instruction_ref Instruction Reference
    \brief Listing of all LC86k instructions and their details

 [TOC]

\section opcode_map Opcode Map
The following table provides a matrix of each instruction type based on its first (opcode) byte.
| |0        |1          |2-3        |4-7             | 8-F          |
|-|:-------:|:---------:|:---------:|:--------------:|:------------:|
|0|NOP      |BR r8      |LD d9      |LD @Ri          |CALL a12      |
|1|CALLR r16|BRF r16    |ST d9      |ST @Ri          |^             |
|2|CALLF a16|JMPF a16   |MOV #i8, d9|MOV #i8, @Ri    |JMP a12       |
|3|MUL      |BE #i8, r8 |BE d9, r8  |BE @Ri, #i8, r8 |^             |
|4|DIV      |BNE #i8, r8|BNE d9, r8 |BNE @Ri, #i8, r8|BPC d9, b3, r8|
|5|LDF      |STF        |DBNZ d9, r8|DBNZ @Ri, r8    |^             |
|6|PUSH d9  ||           INC d9     |INC @Ri         |BP d9, b3, r8 |
|7|POP d9   ||           DEC d9     |DEC @Ri         |^             |
|8|BZ r8    |ADD #i8    |ADD d9     |ADD @Ri         |BN d9, b3, r8 |
|9|BNZ r8   |ADDC #i8   |ADDC d9    |ADDC @Ri        |^             |
|A|RET      |SUB #i8    |SUB d9     |SUB @Ri         |NOT1 d9, b3   |
|B|RETI     |SUBC #i8   |SUBC d9    |SUBC @Ri        |^             |
|C|ROR      |LDC        |XCH d9     |XCH @Ri         |CLR1 d9, b3   |
|D|RORC     |OR #i8     |OR d9      |OR @Ri          |^             |
|E|ROL      |AND #i8    |AND d9     |AND @Ri         |SET1 d9, b3   |
|F|ROLC     |XOR #i8    |XOR d9     |XOR @Ri         |^             |

\section instruction_details Instruction Details

\subsection arithmetic Arithmetic
<b>ADD</b><br>
Add the operand to the ACC Register. CY, AC, and OV are all affected depending on the result.
Mnemonic|Encoding                                    |Cycles
--------|--------------------------------------------|------
ADD #i8 |10000001  [i7][i6][i5][i4][i3][i2][i1][i0]  |1
ADD d9  |1000001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
ADD @Ri |100001[i1][i0]                              |1


<b>ADDC</b><br>
Add the operand plus the carry bit (CY) to the ACC Register. CY, AC, and OV are all affected depending on the result.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
ADDC #i8 |10010001  [i7][i6][i5][i4][i3][i2][i1][i0]  |1
ADDC d9  |1001001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
ADDC @Ri |100101[i1][i0]                              |1

 
<b>SUB</b><br>
Subtract the operand from the ACC Register. CY, AC, and OV are all affected depending on the result.
Mnemonic|Encoding                                    |Cycles
--------|--------------------------------------------|------
SUB #i8 |10100001  [i7][i6][i5][i4][i3][i2][i1][i0]  |1
SUB d9  |1010001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
SUB @Ri |101001[i1][i0]                              |1


<b>SUBC</b><br>
Subtract the operand and carry flag (CY) from the ACC Register. CY, AC, and OV are all affected depending on the result.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
SUBC #i8 |10110001  [i7][i6][i5][i4][i3][i2][i1][i0]  |1
SUBC d9  |1011001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
SUBC @Ri |101101[i1][i0]                              |1
 

<b>INC</b><br>
Add 1 to the operand. No PSW flags are affected.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
INC d9   |0110001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
INC @Ri  |011001[i1][i0]                              |1


<b>DEC</b><br>
Subtract 1 from the operand. No PSW flags are affected.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
DEC d9   |0111001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
DEC @Ri  |011101[i1][i0]                              |1

<b>MUL</b><br>
The 16-bit operand formed by the value of ACC being the high 8-bits and the value of C being the low 8-bits is 
multiplied by the value of the B register. The resulting 24-bit integer is stored from the high to low byte within B, ACC, and C respectively.
CY is cleared. OV is set if the result is greater than 16-bits or cleared otherwise.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
MUL      |00110000                                    |7


<b>DIV</b><br>
The 16-bit operand formed by the value of ACC being the high 8-bits and the value of C being the low 8-bits is divided by the contets of the B register. The resulting 16-bit quotient has its high byte stored within ACC and its low byte within C. The remainder is stored within B. CY is clared. OV is set if the remainder is zero or is cleared otherwise.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
MUL      |01000000                                    |7

\subsection logical Logical

<b>AND</b><br>
Perform bitwise AND operation between the contents of the ACC register and the given operand. No PSW flags are modified.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
AND #i8  |11100001 [i7][i6][i5][i4][i3][i2][i1][i0]   |1
AND d9   |1110001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
AND @Ri  |111001[i1][i0]                              |1

<b>OR</b><br>
Perform bitwise OR operation between the contents of the ACC register and the given operand. No PSW flags are modified.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
OR #i8  |11010001 [i7][i6][i5][i4][i3][i2][i1][i0]   |1
OR d9   |1101001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
OR @Ri  |110101[i1][i0]                              |1

<b>XOR</b><br>
Perform bitwise XOR operation between the contents of the ACC register and the given operand. No PSW flags are modified.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
XOR #i8  |11110001 [i7][i6][i5][i4][i3][i2][i1][i0]   |1
XOR d9   |1111001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
XOR @Ri  |111101[i1][i0]          

<b>ROL</b><br>
Rotate the value of the ACC register to the left by one bit position, wrapping the most significant bit around to the least significant bit. No PSW flags are modified.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
ROL      |11100000                                    |1
    
<b>ROLC</b><br>
Rotate the value of the ACC register to the left by one bit position, copying the most significant bit to the CY flag, and replacing the least significant bit with the old value of the CY flag. AV and OC flags are not modified.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
ROLC     |11110000                                    |1


<b>ROR</b><br>
Rotate the value of the ACC register to the right by one bit position, wrapping the least significant bit around to the most significant bit. No PSW flags are modified.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
ROR      |11000000                                    |1

<b>RORC</b><br>
Rotate the value of the ACC register to the right by one bit position, copying the least significant bit to the CY flag, and replacing the most significant bit with the old value of the CY flag. AV and OC flags are not modified.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
RORC     |11010000                                    |1

\subsection data_transfer Data Transfer

<b>LD</b><br>
Load the operand into the ACC register. No PSW flags are modified.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
LD d9    |0000001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
LD @Ri   |000001[i1][i0]                              |1

<b>ST</b><br>
Store the value held in the ACC register into the operand address. No PSW flags are modified.
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
ST d9    |0001001[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
ST @Ri   |000101[i1][i0]                              |1

<b>MOV</b><br>
Sets the operand value to the immediate value. No PSW flags are modified
Mnemonic    |Encoding                                                                     |Cycles
------------|-----------------------------------------------------------------------------|------
MOV @i8, d9 |0010001[d8] [d7][d6][d5][d4][d3][d2][d1][d0] [i7][i6][i5][i4][i3][i2][i1][i0]|2
MOV #i8, @Rj|001001[i1][i0] [i7][i6][i5][i4][i3][i2][i1][i0]                              |1

<b>LDC</b><br>
Loads a value fromm instruction space into the ACC register. The source address is calculated by adding ACC to the 16-bit table register value (TRH being the high byte, TRL being the low byte). No PSW flags are modified
Mnemonic |Encoding                                    |Cycles
---------|--------------------------------------------|------
LDC      |11000001                                    |2

<b>PUSH</b><br>
Pushes the operand onto the stack by incrementing the SP by one and storing it at the resulting position. No PSW flags are modified.
Mnemonic    |Encoding                                    |Cycles
------------|--------------------------------------------|------
PUSH d9     |0110000[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|2

<b>POP</b><br>
Pops the operand from the stack by reading its value from the position pointed to by the SP register, then decrementing it by 1. No PSW flags are modified.
Mnemonic    |Encoding                                    |Cycles
------------|--------------------------------------------|------
POP d9      |0111000[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|2

<b>XCH</b><br>
Echanges the values of the operand and the ACC register. No PSW flags are modified.
Mnemonic    |Encoding                                    |Cycles
------------|--------------------------------------------|------
XCH d9      |1100000[d8] [d7][d6][d5][d4][d3][d2][d1][d0]|1
XCH @Ri     |110001[i1][i0]                              |1


\subsection jump Jump
\subsection conditional_branch Conditional Branch
\subsection subroutine Subroutine
\subsection bit_maipulation Bit Manipulation
\subsection miscellaneous Miscellaneous




*/